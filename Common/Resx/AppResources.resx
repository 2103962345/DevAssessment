<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdminPageWelcomeMessage" xml:space="preserve">
    <value>Welcome to Admin Page!</value>
    <comment>Admin Page Welcome Label Text on the center of screen</comment>
  </data>
  <data name="AlertDialogAcceptButtonText" xml:space="preserve">
    <value>Ok</value>
    <comment>adding alert dialog's accept button text</comment>
  </data>
  <data name="AlertDialogEmailValidationMessage" xml:space="preserve">
    <value>Email is not Valid</value>
    <comment>email format validation message on alert dialog</comment>
  </data>
  <data name="AlertDialogPasswordMessage" xml:space="preserve">
    <value>Password is required</value>
    <comment>password validation message</comment>
  </data>
  <data name="AlertDialogTitle" xml:space="preserve">
    <value>Alert!</value>
    <comment>title name on the alert dialog</comment>
  </data>
  <data name="AlertDialogUserNameMessage" xml:space="preserve">
    <value>UserName is required</value>
    <comment>username validation message</comment>
  </data>
  <data name="BadRequestDialogTitle" xml:space="preserve">
    <value>Bad Request</value>
    <comment>title name on the bad request dialog</comment>
  </data>
  <data name="BadRequestLoginMessage" xml:space="preserve">
    <value>Can't Login</value>
    <comment>showing bad request message on Login Authentication</comment>
  </data>
  <data name="ButtonGetDeviceOrientation" xml:space="preserve">
    <value>Get Device Orientation</value>
    <comment>showing text "Get Device Orientation" on button</comment>
  </data>
  <data name="ButtonPickPhoto" xml:space="preserve">
    <value>Pick Photo</value>
    <comment>showing text "Pick Photo" on button</comment>
  </data>
  <data name="ButtonSpeak" xml:space="preserve">
    <value>Speak</value>
    <comment>showing text "Speak" on button</comment>
  </data>
  <data name="CustomAlertDialogMessage" xml:space="preserve">
    <value>This is a custom user dialog</value>
    <comment>showing  a message to the user on custom dialog</comment>
  </data>
  <data name="CustomDialogCloseButtonText" xml:space="preserve">
    <value>Close Dialog</value>
    <comment>close dialog button text</comment>
  </data>
  <data name="EmailPlaceholder" xml:space="preserve">
    <value>Please enter your email</value>
    <comment>input filed for entering email</comment>
  </data>
  <data name="ErrorDialogLoginAuthMessage" xml:space="preserve">
    <value>Email or Password is wrong</value>
    <comment>login authentication error message</comment>
  </data>
  <data name="ErrorDialogTitle" xml:space="preserve">
    <value>Error!</value>
    <comment>title name on the error dialog</comment>
  </data>
  <data name="LabelDeviceOrientation" xml:space="preserve">
    <value>Device Orientation</value>
    <comment>showing the "device orientation" on label</comment>
  </data>
  <data name="LabelPhotoPicker" xml:space="preserve">
    <value>Photo Picker</value>
    <comment>showing text "Photo Picker" on button</comment>
  </data>
  <data name="LogAlertDialogTitle" xml:space="preserve">
    <value>Log Details</value>
    <comment>showing log custom dialog popup title</comment>
  </data>
  <data name="LoginButton" xml:space="preserve">
    <value>Login</value>
    <comment>this string appears on a button to login into app</comment>
  </data>
  <data name="MasterPageLabel" xml:space="preserve">
    <value>Master Page</value>
    <comment>Master Page Label which will present top of the page.</comment>
  </data>
  <data name="MenuNameAboutUs" xml:space="preserve">
    <value>About Us</value>
    <comment>showing About Us menu text</comment>
  </data>
  <data name="MenuNameContactUs" xml:space="preserve">
    <value>Contact Us</value>
    <comment>showing Contact Us menu text</comment>
  </data>
  <data name="MenuNameDependencyServices" xml:space="preserve">
    <value>Dependency Services</value>
    <comment>showing Dependency Services menu text</comment>
  </data>
  <data name="MenuNameHome" xml:space="preserve">
    <value>Home</value>
    <comment>showing Home menu  text</comment>
  </data>
  <data name="MenuNameLogOut" xml:space="preserve">
    <value>Log Out</value>
    <comment>showing Log Out menu  text</comment>
  </data>
  <data name="PasswordPlaceholder" xml:space="preserve">
    <value>Please enter your password</value>
    <comment>input field for entering password</comment>
  </data>
</root>